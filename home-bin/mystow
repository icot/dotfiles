#!/home/spike/.guix-profile/bin/guile \
-e main -s
!#

(use-modules
 (ice-9 format)
 (ice-9 ftw)
 (ice-9 regex))

(define (target-name filename)
  ;; Return filename or ".filename" if filename starts with "dot-"
  (let ((m (string-match "^dot-" filename)))
    (if m
	(format #f ".~a" (match:suffix m))
	filename)))
    
;; https://www.gnu.org/software/guile/manual/html_node/File-Tree-Walk.html
(define (mystow directory-name)
  "stow files under FOLDER (similar to GNU Stow.)"

  (define (enter? name stat result)
    ;; Skip version control and not stowed directories"
    (not (or
	  (member (basename name) '(".git" "ignore"))
	  (string-match "-NOSTOW$" (basename name)))))
  
  (define (leaf name stat result)
    ;; Process files
    (let* ((bname (basename name))
	   (target (target-name bname)))
      (if (or
	   (string-match "-NOSTOW$" bname)
	   (string-match "-nostow$" bname))
	  (begin
	    (format #t "Skipping file ~a~%" bname)
	    result)
	  (begin
	    (format #t "Processing file ~a with target name ~a~%" bname target)
	    (+ result 1)))))

  ;; Process directories
  (define (down name stat result)
    (let ((target (target-name (basename name))))
      (format #t "Processing folder ~a with target name ~a~%" name target)
      (+ result 1)))
  
  (define (up name stat result)
    (format #t "Exit folder: ~a~%" name)
    result)

  ;; Likewise for skipped directories.
  (define (skip name stat result)
    (format #t "Skipping folder: ~a~%" name)
    result)

  ;; Ignore unreadable files/directories but warn the user.
  (define (error name stat errno result)
    (format (current-error-port) "warning: ~a: ~a~%"
            name (strerror errno))
    result)

  (file-system-fold enter? leaf down up skip error
                           0  ; initial counter is zero processed files
                           directory-name))

;; Entry point
(define (main args)
  (format #t "~a~%" args)
  (mystow (cadr args)))
